import*as e from"mysql";import{isNull as r,isUndefined as t,isString as o}from"itee-validators";import s from"path";import{kStringMaxLength as n}from"buffer";import i from"fs";import{Writable as a}from"stream";console.log("Itee.Database v8.0.0 - EsModule");
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @file Todo
 *
 * @example Todo
 *
 */
class c extends a{constructor(e){super(e);const r=e.bufferSize||n;this.memoryBuffer=Buffer.alloc(r),this.offset=0}_final(e){e()}_write(e,r,t){const o=Buffer.isBuffer(e)?e:new Buffer(e,r);for(let e=0,r=o.length;e<r;e++)this.memoryBuffer[this.offset]=o[e],this.offset++;t()}_writev(e,r){for(let r=0,t=e.length;r<t;r++)this.memoryBuffer=Buffer.concat([this.memoryBuffer,e[r]]);r()}_releaseMemory(){this.memoryBuffer=null}toArrayBuffer(){const e=this.memoryBuffer,r=new ArrayBuffer(e.length),t=new Uint8Array(r);for(let r=0;r<e.length;++r)t[r]=e[r];return this._releaseMemory(),r}toJSON(){return JSON.parse(this.toString())}toString(){const e=this.memoryBuffer.toString();return this._releaseMemory(),e}}class l{constructor(e={}){const r={dumpType:l.DumpType.ArrayBuffer,...e};this.dumpType=r.dumpType,this._isProcessing=!1,this._queue=[]}get dumpType(){return this._dumpType}set dumpType(e){if(r(e))throw new TypeError("Dump type cannot be null ! Expect a non empty string.");if(t(e))throw new TypeError("Dump type cannot be undefined ! Expect a non empty string.");this._dumpType=e}setDumpType(e){return this.dumpType=e,this}convert(e,r,t,o,s){e?(this._queue.push({file:e,parameters:r,onSuccess:t,onProgress:o,onError:s}),this._processQueue()):s("File cannot be null or empty, aborting file convertion !!!")}_processQueue(){if(0===this._queue.length||this._isProcessing)return;this._isProcessing=!0;const e=this,r=this._queue.shift(),t=r.file,s=r.parameters,n=r.onSuccess,i=r.onProgress,a=r.onError;if(o(t))e._dumpFileInMemoryAs(e._dumpType,t,s,c,p,f);else{const r=t.data;switch(e._dumpType){case l.DumpType.ArrayBuffer:{const e=r.length,t=new ArrayBuffer(e),o=new Uint8Array(t);for(let t=0;t<e;++t)o[t]=r[t];c(t)}break;case l.DumpType.JSON:c(JSON.parse(r.toString()));break;case l.DumpType.String:c(r.toString());break;default:throw new RangeError(`Invalid switch parameter: ${e._dumpType}`)}}function c(r){e._convert(r,s,u,p,f)}function u(r){n(r),e._isProcessing=!1,e._processQueue()}function p(e){i(e)}function f(r){a(r),e._isProcessing=!1,e._processQueue()}}_dumpFileInMemoryAs(e,r,t,o,s,n){let a=!1;const u=i.createReadStream(r);u.on("error",e=>{console.error(`Read stream on error: ${e}`),a=!0,n(e)});const p=parseInt(t.fileSize),f=new c({bufferSize:p});f.on("error",e=>{a=!0,n(e)}),f.on("finish",()=>{if(!a){switch(e){case l.DumpType.ArrayBuffer:o(f.toArrayBuffer());break;case l.DumpType.String:o(f.toString());break;case l.DumpType.JSON:o(f.toJSON());break;default:throw new RangeError(`Invalid switch parameter: ${e}`)}u.unpipe(),u.close(),f.end()}}),u.pipe(f)}_convert(){}}l.MAX_FILE_SIZE=67108864,l.DumpType=Object.freeze({ArrayBuffer:0,String:1,JSON:2});
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @file Todo
 *
 * @example Todo
 *
 */
class u{static _registerRoutesTo(e,r,t,o,s){for(let n=0,i=s.length;n<i;n++){const i=s[n],a=new(o.get(i.controller.name))({driver:e,...i.controller.options}),c=t({mergeParams:!0});console.log(`\tAdd controller for base route: ${i.route}`),r.use(i.route,u._populateRouter(c,a,i.controller.can))}}static _populateRouter(e,r,t={}){for(let o in t){const s=t[o];console.log(`\t\tMap route ${s.over} on (${s.on}) to ${r.constructor.name}.${o} method.`),e[s.on](s.over,r[o].bind(r))}return e}constructor(e={}){const r={controllers:new Map,descriptors:[],...e};this.controllers=r.controllers,this.descriptors=r.descriptors,this.__dirname=void 0}get controllers(){return this._controllers}set controllers(e){if(r(e))throw new TypeError("Controllers cannot be null ! Expect a map of controller.");if(t(e))throw new TypeError("Controllers cannot be undefined ! Expect a map of controller.");if(!(e instanceof Map))throw new TypeError(`Controllers cannot be an instance of ${e.constructor.name} ! Expect a map of controller.`);this._controllers=e}get descriptors(){return this._descriptors}set descriptors(e){if(r(e))throw new TypeError("Descriptors cannot be null ! Expect an array of POJO.");if(t(e))throw new TypeError("Descriptors cannot be undefined ! Expect an array of POJO.");this._descriptors=e}addController(e){return this._controllers.set(e.name,e),this}addDescriptor(e){return this._descriptors.push(e),this}beforeRegisterRoutes(){}registerTo(e,r,t){this.beforeRegisterRoutes(e),u._registerRoutesTo(e,r,t,this._controllers,this._descriptors)}}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @file Todo
 *
 * @example Todo
 *
 */
/**
 * @author [Ahmed DCHAR]{@link https://github.com/dragoneel}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @file Todo
 *
 * @example Todo
 *
 */
class p extends class{constructor(e={}){const r={driver:null,application:null,router:null,plugins:[],...e};this.driver=r.driver,this.application=r.application,this.router=r.router,this.plugins=r.plugins,this.init(),this._registerPlugins()}get plugins(){return this._plugins}set plugins(e){if(r(e))throw new TypeError("Plugins cannot be null ! Expect an array of TDatabasePlugin.");if(t(e))throw new TypeError("Plugins cannot be undefined ! Expect an array of TDatabasePlugin.");this._plugins=e}get router(){return this._router}set router(e){if(r(e))throw new TypeError("Router cannot be null ! Expect a Express Router.");if(t(e))throw new TypeError("Router cannot be undefined ! Expect a Express Router.");this._router=e}get application(){return this._application}set application(e){if(r(e))throw new TypeError("Application cannot be null ! Expect a Express Application.");if(t(e))throw new TypeError("Application cannot be undefined ! Expect a Express Application.");this._application=e}get driver(){return this._driver}set driver(e){if(r(e))throw new TypeError("Driver cannot be null ! Expect a database driver.");if(t(e))throw new TypeError("Driver cannot be undefined ! Expect a database driver.");this._driver=e}setPlugins(e){return this.plugins=e,this}setRouter(e){return this.router=e,this}setApplication(e){return this.application=e,this}setDriver(e){return this.driver=e,this}init(){}_registerPlugins(){for(let[e,r]of Object.entries(this._plugins))this._registerPackagePlugin(e,r)?console.log(`Use ${e} plugin from node_modules`):this._registerLocalPlugin(e,r)?console.log(`Use ${e} plugin from local folder`):console.error(`Unable to register the plugin ${e} the package or local folder doesn't seem to exist ! Skip it.`)}_registerPackagePlugin(e){let r=!1;try{const t=require(e);t instanceof u?(t.__dirname=s.dirname(require.resolve(e)),t.registerTo(this._driver,this._application,this._router),r=!0):console.error(`The plugin ${e} doesn't seem to be an instance of an extended class from TAbstractDatabasePlugin ! Skip it.`)}catch(e){e.code&&"MODULE_NOT_FOUND"===e.code||console.error(e)}return r}_registerLocalPlugin(e){let r=!1;try{const t=s.join(__dirname,"../../../","databases/plugins/",e,`${e}.js`),o=require(t);o instanceof u?(o.__dirname=s.dirname(require.resolve(t)),o.registerTo(this._driver,this._application,this._router),r=!0):console.error(`The plugin ${e} doesn't seem to be an instance of an extended class from TAbstractDatabasePlugin ! Skip it.`)}catch(e){console.error(e)}return r}connect(){}close(){}on(){}}{constructor(r={}){super({...r,driver:e})}close(){}connect(){const e=this._driver.createConnection({host:"localhost",user:"dbuser",password:"s3kreee7",database:"my_db"});e.connect(),e.query("SELECT 1 + 1 AS solution",(function(e,r,t){if(e)throw e;console.log("The solution is: ",r[0].solution),console.log("The fields is: ",t)})),e.end()}on(){}_initDatabase(){super._initDatabase()}}export{p as TMySQLDatabase};
